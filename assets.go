// Code generated by go-bindata.
// sources:
// configs/csv-example.yaml
// configs/rule-example.yaml
// configs/top.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configsCsvExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\xd5\xe5\xca\x4e\xad\xb4\x52\x88\xf4\x0f\x0d\x8a\x77\x0c\xf0\x8c\xf7\x76\x8d\xe4\x4a\x2f\xca\x2f\x2d\xb0\x52\x48\x2e\x2e\xe3\xca\xcd\x4f\x49\x85\xb0\xd2\x32\x53\x73\x52\x8a\xad\xb8\x14\x14\x74\x15\x0a\x12\x4b\x4a\x52\x8b\xf2\xac\x14\x94\x54\x0c\x94\x80\x22\x0a\x0a\x29\xa9\xc5\xc9\x40\x6e\x6a\x71\x7c\x41\x51\x66\x72\xaa\x12\xba\x32\x23\x14\x65\x79\x85\x30\x65\x80\x00\x00\x00\xff\xff\xe1\xe4\x4f\xea\x81\x00\x00\x00")

func configsCsvExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsCsvExampleYaml,
		"configs/csv-example.yaml",
	)
}

func configsCsvExampleYaml() (*asset, error) {
	bytes, err := configsCsvExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/csv-example.yaml", size: 129, mode: os.FileMode(420), modTime: time.Unix(1441309250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsRuleExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x78\x31\x10\x6f\xe4\x64\x37\x7b\xd3\x61\x83\xec\x6e\x51\x14\x49\x5a\x23\x45\x0a\x04\x96\x2b\xd0\xe2\x44\x26\x6c\x89\x2c\x49\x59\x48\x83\xfc\x7b\x39\x14\x65\x4b\x32\x15\xd4\x07\x99\xf3\xe6\x71\xe6\x0d\x39\x24\xe7\xf3\xf9\x64\x0b\x2f\x31\x79\xfa\xf2\xf8\x90\xde\x2c\x3e\xa5\xb7\x1f\x9e\x26\xb9\x12\x95\x8c\x89\x01\x6d\xdc\x70\x52\x08\x06\x31\x59\x53\x93\x6d\x26\x42\x1a\x2e\x4a\x1d\x4f\x08\x99\x93\x02\xa1\x98\xfc\x63\x0d\xfc\x2d\x94\xc8\x40\x6b\xd0\x31\xf1\xc8\xeb\x2b\x91\x16\x4c\x8d\x30\x74\x17\x4f\x19\x79\x7b\x23\x6e\x1c\x0d\x19\xaa\x2a\x4b\x5e\xe6\x9e\xe3\xad\x13\x96\x36\x55\xb6\xf5\x1c\x37\x3e\x65\xec\x00\xe4\x31\x50\x6b\x76\x79\x65\x55\xa4\x66\xa3\x80\x32\xdd\x4a\x6a\xac\x50\x4d\x77\x82\x32\x72\xb3\xcf\xbb\x25\xed\x2c\x96\xfe\x15\x4f\x9f\xed\xdc\x68\x88\x5f\x8d\xe0\x7f\x37\x78\x28\xc7\x7f\x8b\x47\x52\x69\x9a\x43\x37\x49\x26\xab\xd4\x81\xf6\x0b\x2a\x9e\x4a\x14\x8a\xc3\x28\x48\xd2\x2f\xda\x73\xec\x28\x0a\x31\x38\xdb\x81\xa7\xe0\x30\x24\xe4\xeb\x86\x2a\x60\x77\x7c\xed\xf6\xb7\x55\xcf\xd7\xa9\x02\xcd\x19\x94\x26\x9e\x16\x50\xb8\x0d\xf2\x40\xd4\xe7\x31\x6a\xe8\x81\x83\xc6\xc0\xbf\xe3\xe5\x16\x18\x3f\xc6\x69\x81\x8b\x90\x9c\x7b\x28\x1e\x20\x6f\xdb\xcd\x87\xb1\x13\xad\x1c\x87\xb6\x6d\xe5\x63\x35\x8d\x15\x66\xfe\x4e\x01\x5d\xbe\x54\x7c\x4f\x0d\x1c\xe8\xde\x1e\x61\x6b\xb7\x6e\x07\x72\x63\x06\x4b\x5a\x6c\x5e\xb4\x2d\xab\x53\x8f\xb4\x08\x6e\xf1\x71\x3a\x1a\xe4\x6c\xc0\xa8\x79\x37\x83\xb3\x66\xd1\x30\x4a\xd9\x8f\xe3\xcc\xa0\x8c\x6f\xf7\x1d\x05\xfb\x22\xdd\x6b\xfe\xf3\x58\xac\xb3\xa2\x1e\xe1\x59\xd1\x02\x06\x34\x87\xd5\x42\x6d\x43\x13\x74\x4d\xed\xb9\xf3\x07\xec\xec\xcf\x19\xf1\xc0\x29\x4b\x54\x66\x40\x43\x24\x28\xfb\x33\x18\xcc\x77\x68\x07\x49\xb3\x2d\xd8\xd9\xee\x54\x83\x49\xbd\x9d\xf2\x32\x3e\x4b\xd8\x79\x72\x69\x3f\xcb\x7f\x6f\xef\x3f\xae\xae\x67\xae\xef\xcb\x4e\xfa\xee\x04\x9b\x31\x3c\xc3\x3a\x82\x4a\xfe\xe7\x7a\xdb\xed\x4a\x66\xed\x14\x2f\x91\x70\x18\xf4\x44\x03\x76\xad\xb8\x31\x30\xa2\xd4\x3b\x83\xb9\x71\xbb\x39\x8b\xbf\xe3\xc4\xd9\xf2\x7c\xbe\xba\x6e\xee\x95\xf6\xc4\x8b\xa2\xa0\xa5\x15\xb2\x4c\xea\xe4\x22\x99\x27\x7a\x75\x3e\xeb\x31\x64\x66\x52\x7b\x2f\xb8\xcc\x17\x18\xa4\xe7\x35\xbc\x00\x74\xbd\x5e\xbd\xc5\xee\x6b\x83\xe0\x5f\x9f\xd5\x5c\xa2\x98\x84\x25\x97\xc3\x04\xe8\xac\x7f\xbc\xe3\x94\x42\xd9\x6d\x1b\x29\xc0\xb6\x57\xdb\x63\x1d\xcd\x95\xca\x4f\xd1\xac\x90\x4a\x07\xc8\xb9\x92\x4d\x4b\x75\x30\x5c\xb3\x01\xa6\x8d\x3b\xe3\x75\x0f\x5c\x0b\xa1\x9d\xb8\x3f\xae\x71\x53\x50\x5e\xb2\x3c\x8c\x56\xfd\x62\xf0\x7a\xb5\xcb\xd5\x5e\xed\x1d\x54\x98\x0d\xa0\xb6\xbe\xa7\x3a\x15\xf1\x4c\xab\xdd\xf8\x62\x64\xa2\x1e\x5d\x27\x9d\x6b\xbc\xd2\xc6\xdd\x0a\xb2\xfd\x98\xdb\x3e\x13\x6b\xcd\xde\xf1\x16\xd4\x36\xdd\x98\x2a\x3d\xaa\x4a\xda\xb7\x06\x0f\xfe\x88\x1b\x9f\x9e\xf1\xb9\xa2\xb6\x4f\x5d\xb8\x2d\x9b\x57\x10\xb7\xea\x57\x00\x00\x00\xff\xff\xd2\x90\xbd\x51\xb6\x08\x00\x00")

func configsRuleExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsRuleExampleYaml,
		"configs/rule-example.yaml",
	)
}

func configsRuleExampleYaml() (*asset, error) {
	bytes, err := configsRuleExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/rule-example.yaml", size: 2230, mode: os.FileMode(420), modTime: time.Unix(1441338602, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsTopYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5b\x6f\xdb\x20\x14\x7e\xcf\xaf\xe0\x25\x52\xb3\x3a\xad\xd6\xbd\xf9\x61\x51\x77\xd1\x34\xb5\xdd\xa2\x4e\x9d\x54\xd5\x95\x45\xec\x13\x07\xc5\x36\x0c\x70\xac\xae\xea\x7f\xdf\x01\xe3\xc4\x17\x2c\x2d\x0f\x0e\xe7\xfb\xbe\x73\x01\x0e\xb0\x5c\x2e\x67\x7b\x78\x09\xc9\xe3\xcf\x87\xfb\xf8\x7a\xfd\x3d\xbe\xf9\xfa\x38\xcb\x24\xaf\x44\x48\x34\x28\x6d\x87\xb3\x82\xa7\x10\x92\x0d\xd5\xc9\x6e\xc6\x85\x66\xbc\x54\xe1\x8c\x90\x25\xd9\x52\x96\x87\xe4\x23\x8e\xcd\x6f\x2d\x79\x02\x4a\x81\x23\x0b\xa3\xf7\xb1\xc4\x21\xaf\xaf\x44\x20\x18\x6b\xae\x69\x1e\xce\x53\xf2\xf6\x46\xec\x38\x18\x2a\x64\x55\x96\xac\xcc\x9c\xc6\x59\x23\x95\xd2\x55\xb2\x77\x1a\x3b\x1e\x2b\x72\x00\x71\x0a\xd4\x9a\x5d\x5d\x59\x15\xb1\xde\x49\xa0\xa9\x6a\x4b\x6a\x2c\xdf\x9c\x6e\x39\x4d\xc9\xf5\x21\xeb\x4e\x29\x47\x2c\x7e\x1f\xce\xb7\xe8\x1b\x0c\xf1\xab\x09\xfc\x43\x83\xfb\x72\x7c\x5e\x3f\x90\x4a\xd1\x0c\xba\x49\x12\x51\xc5\x16\xc4\x2f\xc8\x70\x2e\x4c\xa1\x66\x18\x78\x45\xea\x45\x39\x0d\x8e\x02\x9f\x82\xa5\x39\x38\x89\x19\xfa\x0a\xf9\xb5\xa3\x12\xd2\x5b\xb6\xb1\xfb\xdb\x56\xcf\x36\xb1\x04\xc5\x52\x28\x75\x38\x2f\xa0\xb0\x1b\xe4\x80\xa0\xaf\x4b\xa9\xa6\x47\x8d\x31\x06\x7c\xce\xca\x3d\xa4\xec\x14\xa7\x05\x2e\x7c\xe5\xdc\x41\x71\x0f\x59\xdb\x8b\x2e\x0c\x3a\x62\x39\x16\x6d\xdb\xca\xc5\x6a\x1a\xcb\xaf\xfc\x9f\x09\x74\xf5\x42\xb2\x03\xd5\x70\x94\x3b\x7b\x42\xad\xec\xba\x1d\xc5\x8d\xe9\x9d\xd2\x7a\xf7\xa2\x70\x5a\x9d\xf9\x08\x44\xcc\x16\x9f\xdc\x8d\x41\xce\x5a\xaa\x66\xdd\xd0\xd6\x5a\x04\x43\xf7\xb2\x1f\xc0\x9a\xde\xfc\xbf\xef\x3a\xa9\x0f\x45\x7c\x50\xec\xef\x69\x96\xd6\x0a\x7a\x82\xad\xa4\x05\x0c\x64\x16\xab\xb9\xdc\xfb\x1c\x54\x4d\xf1\xc0\xa9\xf0\x2c\x4a\xcf\x23\xfb\x59\x2c\xec\xa2\x34\xf8\x58\xcc\x2b\xed\x57\x1b\xc2\x3b\x89\x1f\xa0\x4d\xf6\x63\x57\x08\x9a\xec\x01\x83\xd8\xc3\x0d\x3a\x76\x76\xcc\xca\x26\xee\x25\x7e\x9e\x3e\xdd\xdc\x7d\x7b\x5e\xd9\xe0\xac\xec\x54\xd1\x75\xc0\x8c\x7e\x0f\x24\xbc\x95\x7c\x61\x6a\xdf\x6d\xce\x14\xed\xd8\xdc\x25\xfe\x30\x86\x09\x06\xea\x5a\x32\xad\x61\xa2\x52\x47\x7a\x73\x9b\xcd\x67\x4d\xa2\x45\x73\xb1\xb4\x47\x9e\x17\x05\x2d\x91\x79\x8a\xea\xe8\x22\x52\xcf\x03\x5e\x24\x3a\xc6\x6b\xc1\x7a\x5e\x8c\xbc\x35\x2b\xc0\x50\xaf\x57\x6f\xa1\xfd\x62\x08\xf3\xd7\x57\x35\x77\xa8\x49\x91\x46\x97\xc3\x04\x86\xac\xff\x34\x77\x6b\x1f\x15\x5c\xba\xcd\x5e\x44\xe7\xab\x1e\x8d\xbd\xd5\x36\x58\xa7\xd4\x4a\x66\x63\x34\x29\x84\x54\x1e\x71\x26\xc5\x30\xa9\x30\x4b\x34\xc0\x94\xb6\x27\xbb\xee\x81\x1b\xce\x95\x2d\xed\xdd\xca\x6c\xc4\xf9\x2a\x7a\x72\xff\xcf\x83\xd5\xc5\x0b\x15\x57\xa8\xbd\xcc\x3b\x28\xd7\x3b\x30\x75\xf5\x99\x6a\x5c\xc0\x96\x56\xf9\xd4\x32\x24\xbc\x9e\x58\x1f\x95\x29\x73\x81\x4d\x91\x12\x92\x83\x9f\xc4\x07\x61\xa3\xd2\x49\xae\xa0\xd8\x55\xfe\x5a\xd4\x44\x2d\x02\xdf\x93\xf6\x8c\x8f\x48\xf3\xb8\x4c\xf9\xf1\x1a\x9f\x32\x7f\xdf\x35\xaf\x9c\xdd\x94\x7f\x01\x00\x00\xff\xff\xb2\x05\x72\x66\xb4\x08\x00\x00")

func configsTopYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsTopYaml,
		"configs/top.yaml",
	)
}

func configsTopYaml() (*asset, error) {
	bytes, err := configsTopYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/top.yaml", size: 2228, mode: os.FileMode(420), modTime: time.Unix(1441396487, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"configs/csv-example.yaml": configsCsvExampleYaml,
	"configs/rule-example.yaml": configsRuleExampleYaml,
	"configs/top.yaml": configsTopYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"configs": &bintree{nil, map[string]*bintree{
		"csv-example.yaml": &bintree{configsCsvExampleYaml, map[string]*bintree{
		}},
		"rule-example.yaml": &bintree{configsRuleExampleYaml, map[string]*bintree{
		}},
		"top.yaml": &bintree{configsTopYaml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

