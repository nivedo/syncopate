// Code generated by go-bindata.
// sources:
// configs/csv-example.yaml
// configs/df.yaml
// configs/rule-example.yaml
// configs/top.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configsCsvExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\xd5\xe5\xca\x2f\x28\xc9\xcc\xcf\x2b\xb6\xe2\x52\x50\xd0\x55\xc8\x48\x4d\x4c\x49\x2d\x2a\xb6\x52\x28\x29\x2a\x4d\x05\x8a\x28\x28\xa4\xa4\xe6\x64\xe6\x66\x96\x80\x05\x95\x74\x94\xc0\x62\xc9\xf9\x39\xa5\xb9\x40\x2d\x0a\x76\x60\xae\x82\x42\x75\x35\x48\xcc\xd0\x4a\xc5\x40\xa1\xb6\x16\x21\xa6\x02\x31\xce\x08\x55\x10\xcc\x05\x04\x00\x00\xff\xff\x7f\xcb\x5e\x7d\x7a\x00\x00\x00")

func configsCsvExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsCsvExampleYaml,
		"configs/csv-example.yaml",
	)
}

func configsCsvExampleYaml() (*asset, error) {
	bytes, err := configsCsvExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/csv-example.yaml", size: 122, mode: os.FileMode(420), modTime: time.Unix(1441735447, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsDfYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x4a\x03\x31\x10\x86\xef\x79\x8a\xb9\x14\x5a\x24\x78\xf1\x34\x07\x8b\x07\x05\xf1\xa0\x08\x1e\x8a\x2b\x21\xcd\xce\xea\xb0\xbb\x4d\xd8\x99\x2a\x6b\xe9\xbb\xbb\x9b\x16\x8a\xed\xe6\x34\x99\xff\xfb\xbf\x10\x6b\xad\xa9\xa9\x47\x58\x3d\xbf\xbd\xba\xbb\x97\x47\xf7\x74\xbf\x32\x9f\x5d\xdc\x26\x04\x25\xd1\x3c\x9a\x36\x96\x84\xb0\xf6\x1a\xbe\x4c\x4c\xca\x71\x23\x68\x00\x2c\x54\x9e\x1b\x84\xdb\x61\x1e\xcf\x03\x37\x24\xbd\x28\xb5\x39\x6c\x47\x7e\x2a\x85\xe3\x66\xb7\x83\x4a\xdc\xba\x89\xa1\x16\x9c\x95\xb0\xdf\xdb\xc3\x25\xd7\x3b\x4a\xe4\x15\xe1\x26\xd3\x67\xb2\xa1\x5a\xb2\xd4\x38\x9f\x2f\xb1\xf5\x09\x16\xcb\xf7\xe2\xa7\xb8\x2e\xec\xc7\xd5\x62\xf0\x9c\x28\x8d\xea\x1b\x27\xfc\x4b\x87\x17\x4e\xc9\x56\xa8\x9c\x0c\xfc\xf7\xf0\xab\xc9\x24\xf8\xe4\x03\x6b\x8f\xb3\xf4\x6f\xcf\xa3\xeb\x1c\xe6\xaa\xa3\x0b\x43\x0a\x1b\x75\x47\x3c\x3b\xfe\x02\x00\x00\xff\xff\xd4\xdc\x99\xb9\x82\x01\x00\x00")

func configsDfYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsDfYaml,
		"configs/df.yaml",
	)
}

func configsDfYaml() (*asset, error) {
	bytes, err := configsDfYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/df.yaml", size: 386, mode: os.FileMode(420), modTime: time.Unix(1441679313, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsRuleExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x78\x31\x10\x6f\xe4\x64\x37\x7b\xd3\x61\x83\xec\x6e\x51\x14\x49\x5a\x23\x45\x0a\x04\x96\x2b\xd0\xe2\x44\x26\x6c\x89\x2c\x49\x59\x48\x83\xfc\x7b\x39\x14\x65\x4b\x32\x15\xd4\x07\x99\xf3\xe6\x71\xe6\x0d\x39\x24\xe7\xf3\xf9\x64\x0b\x2f\x31\x79\xfa\xf2\xf8\x90\xde\x2c\x3e\xa5\xb7\x1f\x9e\x26\xb9\x12\x95\x8c\x89\x01\x6d\xdc\x70\x52\x08\x06\x31\x59\x53\x93\x6d\x26\x42\x1a\x2e\x4a\x1d\x4f\x08\x99\x93\x02\xa1\x98\xfc\x63\x0d\xfc\x2d\x94\xc8\x40\x6b\xd0\x31\xf1\xc8\xeb\x2b\x91\x16\x4c\x8d\x30\x74\x17\x4f\x19\x79\x7b\x23\x6e\x1c\x0d\x19\xaa\x2a\x4b\x5e\xe6\x9e\xe3\xad\x13\x96\x36\x55\xb6\xf5\x1c\x37\x3e\x65\xec\x00\xe4\x31\x50\x6b\x76\x79\x65\x55\xa4\x66\xa3\x80\x32\xdd\x4a\x6a\xac\x50\x4d\x77\x82\x32\x72\xb3\xcf\xbb\x25\xed\x2c\x96\xfe\x15\x4f\x9f\xed\xdc\x68\x88\x5f\x8d\xe0\x7f\x37\x78\x28\xc7\x7f\x8b\x47\x52\x69\x9a\x43\x37\x49\x26\xab\xd4\x81\xf6\x0b\x2a\x9e\x4a\x14\x8a\xc3\x28\x48\xd2\x2f\xda\x73\xec\x28\x0a\x31\x38\xdb\x81\xa7\xe0\x30\x24\xe4\xeb\x86\x2a\x60\x77\x7c\xed\xf6\xb7\x55\xcf\xd7\xa9\x02\xcd\x19\x94\x26\x9e\x16\x50\xb8\x0d\xf2\x40\xd4\xe7\x31\x6a\xe8\x81\x83\xc6\xc0\xbf\xe3\xe5\x16\x18\x3f\xc6\x69\x81\x8b\x90\x9c\x7b\x28\x1e\x20\x6f\xdb\xcd\x87\xb1\x13\xad\x1c\x87\xb6\x6d\xe5\x63\x35\x8d\x15\x66\xfe\x4e\x01\x5d\xbe\x54\x7c\x4f\x0d\x1c\xe8\xde\x1e\x61\x6b\xb7\x6e\x07\x72\x63\x06\x4b\x5a\x6c\x5e\xb4\x2d\xab\x53\x8f\xb4\x08\x6e\xf1\x71\x3a\x1a\xe4\x6c\xc0\xa8\x79\x37\x83\xb3\x66\xd1\x30\x4a\xd9\x8f\xe3\xcc\xa0\x8c\x6f\xf7\x1d\x05\xfb\x22\xdd\x6b\xfe\xf3\x58\xac\xb3\xa2\x1e\xe1\x59\xd1\x02\x06\x34\x87\xd5\x42\x6d\x43\x13\x74\x4d\xed\xb9\xf3\x07\xec\xec\xcf\x19\xf1\xc0\x29\x4b\x54\x66\x40\x43\x24\x28\xfb\x33\x18\xcc\x77\x68\x07\x49\xb3\x2d\xd8\xd9\xee\x54\x83\x49\xbd\x9d\xf2\x32\x3e\x4b\xd8\x79\x72\x69\x3f\xcb\x7f\x6f\xef\x3f\xae\xae\x67\xae\xef\xcb\x4e\xfa\xee\x04\x9b\x31\x3c\xc3\x3a\x82\x4a\xfe\xe7\x7a\xdb\xed\x4a\x66\xed\x14\x2f\x91\x70\x18\xf4\x44\x03\x76\xad\xb8\x31\x30\xa2\xd4\x3b\x83\xb9\x71\xbb\x39\x8b\xbf\xe3\xc4\xd9\xf2\x7c\xbe\xba\x6e\xee\x95\xf6\xc4\x8b\xa2\xa0\xa5\x15\xb2\x4c\xea\xe4\x22\x99\x27\x7a\x75\x3e\xeb\x31\x64\x66\x52\x7b\x2f\xb8\xcc\x17\x18\xa4\xe7\x35\xbc\x00\x74\xbd\x5e\xbd\xc5\xee\x6b\x83\xe0\x5f\x9f\xd5\x5c\xa2\x98\x84\x25\x97\xc3\x04\xe8\xac\x7f\xbc\xe3\x94\x42\xd9\x6d\x1b\x29\xc0\xb6\x57\xdb\x63\x1d\xcd\x95\xca\x4f\xd1\xac\x90\x4a\x07\xc8\xb9\x92\x4d\x4b\x75\x30\x5c\xb3\x01\xa6\x8d\x3b\xe3\x75\x0f\x5c\x0b\xa1\x9d\xb8\x3f\xae\x71\x53\x50\x5e\xb2\x3c\x8c\x56\xfd\x62\xf0\x7a\xb5\xcb\xd5\x5e\xed\x1d\x54\x98\x0d\xa0\xb6\xbe\xa7\x3a\x15\xf1\x4c\xab\xdd\xf8\x62\x64\xa2\x1e\x5d\x27\x9d\x6b\xbc\xd2\xc6\xdd\x0a\xb2\xfd\x98\xdb\x3e\x13\x6b\xcd\xde\xf1\x16\xd4\x36\xdd\x98\x2a\x3d\xaa\x4a\xda\xb7\x06\x0f\xfe\x88\x1b\x9f\x9e\xf1\xb9\xa2\xb6\x4f\x5d\xb8\x2d\x9b\x57\x10\xb7\xea\x57\x00\x00\x00\xff\xff\xd2\x90\xbd\x51\xb6\x08\x00\x00")

func configsRuleExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsRuleExampleYaml,
		"configs/rule-example.yaml",
	)
}

func configsRuleExampleYaml() (*asset, error) {
	bytes, err := configsRuleExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/rule-example.yaml", size: 2230, mode: os.FileMode(420), modTime: time.Unix(1441338602, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsTopYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\xf0\x62\x20\x5e\xcb\x09\x36\x8b\xbd\xe8\xb0\x46\xb6\x2d\x8a\x22\x49\x6b\xa4\x48\x81\xc0\x32\x04\x5a\x1c\xcb\x84\x45\x91\x25\x29\x0b\x69\x90\xff\x5e\x92\xa2\x6c\x49\xa6\x80\xfa\x20\x73\xde\x7b\x9c\x0f\x72\x34\x5a\x2c\x16\x93\x03\xbc\xc6\xe8\xe5\xdb\xf3\x53\x7a\xb7\xfa\x92\xde\x7f\x7a\x99\xe4\x92\x57\x22\x46\x1a\x94\x76\xcb\x09\xe3\x04\x62\xb4\xc5\x3a\xdb\x4f\xb8\xd0\x94\x97\x2a\x9e\x20\xb4\x40\x3b\x4c\x8b\x18\xfd\x67\xd6\xf6\xb7\x92\x3c\x03\xa5\xc0\x93\xcc\xea\x43\x2c\xf2\xc8\xdb\x1b\x12\x06\x4c\x35\xd7\xb8\x88\xa7\x04\xbd\xbf\x23\xb7\x8e\x86\x0a\x59\x95\x25\x2d\x73\xaf\xf1\xd6\x85\x4a\xe9\x2a\x3b\x78\x8d\x5b\x5f\x2a\x0a\x00\x71\x76\xd4\x9a\x5d\x5d\x59\xb1\x54\xef\x25\x60\xa2\xda\x94\x1a\x2b\x54\xd3\x03\xc7\x04\xdd\x1d\xf3\x6e\x49\x85\xc1\xd2\xbf\xe3\xe9\xce\xec\x8d\x86\xf8\xed\x08\xfe\x4f\x83\x87\x62\x7c\x58\x3d\xa3\x4a\xe1\x1c\xba\x41\x32\x51\xa5\x0e\x34\x4f\x90\xf1\x54\xd8\x44\xed\x32\x0a\x8a\xd4\xab\xf2\x1a\xb3\x8a\x42\x0a\x4a\x0a\xf0\x12\xbb\x0c\x25\xf2\x7d\x8f\x25\x90\x07\xba\x75\xf7\xdb\x66\x4f\xb7\xa9\x04\x45\x09\x94\x3a\x9e\x32\x60\xee\x82\x3c\x10\xf5\x75\x04\x6b\x7c\xd2\x58\x63\xc0\x17\xb4\x3c\x00\xa1\x67\x3f\x2d\x70\x1d\x4a\xe7\x11\xd8\x13\xe4\x6d\x2f\x7a\x37\x66\xa3\x49\xc7\xa1\x6d\x5b\x79\x5f\x4d\x63\x85\x95\x7f\x52\x40\x57\x2f\x24\x3d\x62\x0d\x27\xb9\xb7\x47\xd4\xca\x9d\xdb\x49\xdc\x98\xc1\x92\x56\xfb\x57\x65\xca\xea\xd4\x23\x0c\x62\xaf\xf8\xbc\xdd\x1a\xe8\xaa\xa5\x6a\xda\x75\xed\xac\x59\x34\xdc\x5e\xf6\x1d\x38\x33\x18\xff\xc7\x63\x27\xf4\x91\xa5\x47\x45\x7f\x9d\xab\x74\x56\xd4\x13\xec\x24\x66\x30\x90\x39\xac\xe6\xf2\x10\xda\xa0\x6a\x6c\x5e\x38\x15\x5f\x25\x64\x9e\xb8\xc7\x6c\xe6\x0e\xa5\xc1\x2f\xc5\xbc\xd2\x61\xb5\x25\x82\x45\x7c\x05\x6d\xa3\x9f\xba\x42\xe0\xec\x00\xc6\x89\x7b\xb9\x41\xa7\xde\x4e\x69\xd9\xf8\xbd\x31\x8f\xf5\xff\xf7\x8f\x9f\x37\x4b\xe7\x9c\x96\x9d\x2c\xba\x1b\x4c\xc4\xf0\x0e\x43\x04\x33\xf9\x48\xd5\xa1\xdb\x9c\xc4\xd8\xa9\x9d\x25\x61\x37\x96\x89\x06\xea\x5a\x52\xad\x61\x24\x53\x4f\x36\xb1\x25\x08\xc0\x3a\x46\xff\x3a\x0f\x83\x4c\x6c\x2b\xd0\x26\xec\x6c\x3d\x5f\x6c\x96\xcd\xac\x69\xa7\x00\x67\x0c\x97\x86\x5e\x27\x75\x72\x9d\xa8\xcd\x7c\xd6\xe3\x45\xa6\x53\x33\x29\xdc\xf6\x6b\xeb\xa2\xc7\x6a\xca\xc0\x52\x6f\xb7\xef\xb1\x7b\x1a\x17\xf6\xaf\xaf\x6a\xc6\xaa\x0d\x41\x92\x9b\x61\x00\x4b\xd6\x3f\x9b\x71\xdb\x47\x05\x97\xfe\xfe\x67\xc9\xbc\x9f\xb5\x69\xb7\xb6\xe7\x3a\xa9\x56\x32\xbf\x44\x33\x26\xa4\x0a\x88\x73\x29\x86\x41\x85\x3d\xa7\x01\xa6\xb4\x7b\xd9\xeb\x1e\xb8\xe5\x5c\xb9\xd4\xfe\x5a\xda\xbb\x99\x2f\x93\xb5\xff\xdf\xf4\x8b\xb3\x33\xd6\x9c\x50\x3b\xdf\x3b\x28\xd7\x7b\xb0\x79\xf5\x99\xea\x32\x81\x1d\xae\x8a\xb1\x63\xc8\x78\x3d\x72\x3e\x2a\x57\x76\xa6\x8d\x91\x12\xb2\x63\x98\x34\xdf\x88\xad\x22\xa3\x1c\xc3\xa6\xb5\xc2\xb9\xa8\x91\x5c\x84\xf9\xc4\xb4\xaf\xfd\x05\x69\xbf\x37\x63\xfb\x78\x6d\xbe\x6e\xe1\xbe\x6b\x3e\x7c\xee\x52\x7e\x07\x00\x00\xff\xff\x2f\x16\xe7\xe7\xc7\x08\x00\x00")

func configsTopYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsTopYaml,
		"configs/top.yaml",
	)
}

func configsTopYaml() (*asset, error) {
	bytes, err := configsTopYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/top.yaml", size: 2247, mode: os.FileMode(420), modTime: time.Unix(1441769238, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"configs/csv-example.yaml": configsCsvExampleYaml,
	"configs/df.yaml": configsDfYaml,
	"configs/rule-example.yaml": configsRuleExampleYaml,
	"configs/top.yaml": configsTopYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"configs": &bintree{nil, map[string]*bintree{
		"csv-example.yaml": &bintree{configsCsvExampleYaml, map[string]*bintree{
		}},
		"df.yaml": &bintree{configsDfYaml, map[string]*bintree{
		}},
		"rule-example.yaml": &bintree{configsRuleExampleYaml, map[string]*bintree{
		}},
		"top.yaml": &bintree{configsTopYaml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

