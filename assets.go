// Code generated by go-bindata.
// sources:
// configs/csv-example.yaml
// configs/rule-example.yaml
// configs/top.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configsCsvExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\xd5\xe5\xca\x4e\xad\xb4\x52\x88\xf4\x0f\x0d\x8a\x77\x0c\xf0\x8c\xf7\x76\x8d\xe4\x4a\x2f\xca\x2f\x2d\xb0\x52\x48\x2e\x2e\xe3\xca\xcd\x4f\x49\x85\xb0\xd2\x32\x53\x73\x52\x8a\xad\xb8\x14\x14\x74\x15\x0a\x12\x4b\x4a\x52\x8b\xf2\xac\x14\x94\x54\x0c\x94\x80\x22\x0a\x0a\x29\xa9\xc5\xc9\x40\x6e\x6a\x71\x7c\x41\x51\x66\x72\xaa\x12\xba\x32\x23\x14\x65\x79\x85\x30\x65\x80\x00\x00\x00\xff\xff\xe1\xe4\x4f\xea\x81\x00\x00\x00")

func configsCsvExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsCsvExampleYaml,
		"configs/csv-example.yaml",
	)
}

func configsCsvExampleYaml() (*asset, error) {
	bytes, err := configsCsvExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/csv-example.yaml", size: 129, mode: os.FileMode(420), modTime: time.Unix(1441309250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsRuleExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x78\x31\x10\x6f\xe4\x64\x37\x7b\xd3\x61\x83\xec\x6e\x51\x14\x49\x5a\x23\x45\x0a\x04\x96\x2b\xd0\xe2\x44\x26\x6c\x89\x2c\x49\x59\x48\x83\xfc\x7b\x39\x14\x65\x4b\x32\x15\xd4\x07\x99\xf3\xe6\x71\xe6\x0d\x39\x24\xe7\xf3\xf9\x64\x0b\x2f\x31\x79\xfa\xf2\xf8\x90\xde\x2c\x3e\xa5\xb7\x1f\x9e\x26\xb9\x12\x95\x8c\x89\x01\x6d\xdc\x70\x52\x08\x06\x31\x59\x53\x93\x6d\x26\x42\x1a\x2e\x4a\x1d\x4f\x08\x99\x93\x02\xa1\x98\xfc\x63\x0d\xfc\x2d\x94\xc8\x40\x6b\xd0\x31\xf1\xc8\xeb\x2b\x91\x16\x4c\x8d\x30\x74\x17\x4f\x19\x79\x7b\x23\x6e\x1c\x0d\x19\xaa\x2a\x4b\x5e\xe6\x9e\xe3\xad\x13\x96\x36\x55\xb6\xf5\x1c\x37\x3e\x65\xec\x00\xe4\x31\x50\x6b\x76\x79\x65\x55\xa4\x66\xa3\x80\x32\xdd\x4a\x6a\xac\x50\x4d\x77\x82\x32\x72\xb3\xcf\xbb\x25\xed\x2c\x96\xfe\x15\x4f\x9f\xed\xdc\x68\x88\x5f\x8d\xe0\x7f\x37\x78\x28\xc7\x7f\x8b\x47\x52\x69\x9a\x43\x37\x49\x26\xab\xd4\x81\xf6\x0b\x2a\x9e\x4a\x14\x8a\xc3\x28\x48\xd2\x2f\xda\x73\xec\x28\x0a\x31\x38\xdb\x81\xa7\xe0\x30\x24\xe4\xeb\x86\x2a\x60\x77\x7c\xed\xf6\xb7\x55\xcf\xd7\xa9\x02\xcd\x19\x94\x26\x9e\x16\x50\xb8\x0d\xf2\x40\xd4\xe7\x31\x6a\xe8\x81\x83\xc6\xc0\xbf\xe3\xe5\x16\x18\x3f\xc6\x69\x81\x8b\x90\x9c\x7b\x28\x1e\x20\x6f\xdb\xcd\x87\xb1\x13\xad\x1c\x87\xb6\x6d\xe5\x63\x35\x8d\x15\x66\xfe\x4e\x01\x5d\xbe\x54\x7c\x4f\x0d\x1c\xe8\xde\x1e\x61\x6b\xb7\x6e\x07\x72\x63\x06\x4b\x5a\x6c\x5e\xb4\x2d\xab\x53\x8f\xb4\x08\x6e\xf1\x71\x3a\x1a\xe4\x6c\xc0\xa8\x79\x37\x83\xb3\x66\xd1\x30\x4a\xd9\x8f\xe3\xcc\xa0\x8c\x6f\xf7\x1d\x05\xfb\x22\xdd\x6b\xfe\xf3\x58\xac\xb3\xa2\x1e\xe1\x59\xd1\x02\x06\x34\x87\xd5\x42\x6d\x43\x13\x74\x4d\xed\xb9\xf3\x07\xec\xec\xcf\x19\xf1\xc0\x29\x4b\x54\x66\x40\x43\x24\x28\xfb\x33\x18\xcc\x77\x68\x07\x49\xb3\x2d\xd8\xd9\xee\x54\x83\x49\xbd\x9d\xf2\x32\x3e\x4b\xd8\x79\x72\x69\x3f\xcb\x7f\x6f\xef\x3f\xae\xae\x67\xae\xef\xcb\x4e\xfa\xee\x04\x9b\x31\x3c\xc3\x3a\x82\x4a\xfe\xe7\x7a\xdb\xed\x4a\x66\xed\x14\x2f\x91\x70\x18\xf4\x44\x03\x76\xad\xb8\x31\x30\xa2\xd4\x3b\x83\xb9\x71\xbb\x39\x8b\xbf\xe3\xc4\xd9\xf2\x7c\xbe\xba\x6e\xee\x95\xf6\xc4\x8b\xa2\xa0\xa5\x15\xb2\x4c\xea\xe4\x22\x99\x27\x7a\x75\x3e\xeb\x31\x64\x66\x52\x7b\x2f\xb8\xcc\x17\x18\xa4\xe7\x35\xbc\x00\x74\xbd\x5e\xbd\xc5\xee\x6b\x83\xe0\x5f\x9f\xd5\x5c\xa2\x98\x84\x25\x97\xc3\x04\xe8\xac\x7f\xbc\xe3\x94\x42\xd9\x6d\x1b\x29\xc0\xb6\x57\xdb\x63\x1d\xcd\x95\xca\x4f\xd1\xac\x90\x4a\x07\xc8\xb9\x92\x4d\x4b\x75\x30\x5c\xb3\x01\xa6\x8d\x3b\xe3\x75\x0f\x5c\x0b\xa1\x9d\xb8\x3f\xae\x71\x53\x50\x5e\xb2\x3c\x8c\x56\xfd\x62\xf0\x7a\xb5\xcb\xd5\x5e\xed\x1d\x54\x98\x0d\xa0\xb6\xbe\xa7\x3a\x15\xf1\x4c\xab\xdd\xf8\x62\x64\xa2\x1e\x5d\x27\x9d\x6b\xbc\xd2\xc6\xdd\x0a\xb2\xfd\x98\xdb\x3e\x13\x6b\xcd\xde\xf1\x16\xd4\x36\xdd\x98\x2a\x3d\xaa\x4a\xda\xb7\x06\x0f\xfe\x88\x1b\x9f\x9e\xf1\xb9\xa2\xb6\x4f\x5d\xb8\x2d\x9b\x57\x10\xb7\xea\x57\x00\x00\x00\xff\xff\xd2\x90\xbd\x51\xb6\x08\x00\x00")

func configsRuleExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsRuleExampleYaml,
		"configs/rule-example.yaml",
	)
}

func configsRuleExampleYaml() (*asset, error) {
	bytes, err := configsRuleExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/rule-example.yaml", size: 2230, mode: os.FileMode(420), modTime: time.Unix(1441338602, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _configsTopYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\xb8\x31\x10\xdf\xc8\x09\x6e\x8a\x6e\xb4\xa8\x91\x3e\x50\x14\x49\x5a\x23\x45\x0a\x04\x51\x20\xd0\xd2\x58\x26\x2c\x89\x2c\x49\x59\x48\x83\xfc\x7b\x87\x14\x65\xeb\x41\x01\xf5\x42\xe6\x9c\x73\xe6\x41\x72\x34\x5a\x2e\x97\xb3\x3d\xbc\x84\xe4\xf1\xc7\xc3\x7d\x7c\xbd\xfe\x16\xdf\x7c\x79\x9c\x65\x92\x57\x22\x24\x1a\x94\xb6\xcb\x59\xc1\x53\x08\xc9\x86\xea\x64\x37\xe3\x42\x33\x5e\xaa\x70\x46\xc8\x92\x6c\x29\xcb\x43\xf2\x01\xd7\xe6\xb7\x96\x3c\x01\xa5\xc0\x91\x85\xd1\xfb\x58\xe2\x90\xd7\x57\x22\x10\x8c\x35\xd7\x34\x0f\xe7\x29\x79\x7b\x23\x76\x1d\x0c\x15\xb2\x2a\x4b\x56\x66\x4e\xe3\xac\x91\x4a\xe9\x2a\xd9\x3b\x8d\x5d\x8f\x15\x39\x80\x38\x05\x6a\xcd\xae\xae\xac\x8a\x58\xef\x24\xd0\x54\xb5\x25\x35\x96\x6f\x4f\xb7\x9c\xa6\xe4\xfa\x90\x75\xb7\x94\x23\x16\xff\x1f\xce\xb7\xe8\x1b\x0c\xf1\xab\x09\xfc\x5d\x83\xfb\x72\x7c\x5a\x3f\x90\x4a\xd1\x0c\xba\x49\x12\x51\xc5\x16\xc4\x27\xc8\x70\x2e\x4c\xa1\x66\x19\x78\x45\xea\x45\x39\x0d\xae\x02\x9f\x82\xa5\x39\x38\x89\x59\xfa\x0a\xf9\xb9\xa3\x12\xd2\x5b\xb6\xb1\xf7\xdb\x56\xcf\x36\xb1\x04\xc5\x52\x28\x75\x38\x2f\xa0\xb0\x17\xe4\x80\xa0\xaf\x4b\xa9\xa6\x47\x8d\x31\x06\x7c\xce\xca\x3d\xa4\xec\x14\xa7\x05\x2e\x7c\xe5\xdc\x41\x71\x0f\x59\xdb\x8b\x2e\x0c\x3a\x62\x39\x16\x6d\xdb\xca\xc5\x6a\x1a\xcb\xaf\xfc\x97\x0d\x74\xf5\x42\xb2\x03\xd5\x70\x94\x3b\x7b\x42\xad\xec\xb9\x1d\xc5\x8d\xe9\xdd\xd2\x7a\xf7\xa2\x70\x5b\x9d\xfd\x08\x44\xcc\x15\x9f\xdc\x8d\x41\xce\x5a\xaa\x66\xdd\xd0\xd6\x5a\x04\x43\xf7\xb2\x1f\xc0\x9a\xde\xfc\xbf\xee\x3a\xa9\x0f\x45\x7c\x50\xec\xcf\x69\x97\xd6\x0a\x7a\x82\xad\xa4\x05\x0c\x64\x16\xab\xb9\xdc\xfb\x1c\x54\x4d\xf1\x85\x53\xe1\x59\x94\x9e\x47\xf6\xb1\x58\xd8\x43\x69\xf0\xb1\x98\x57\xda\xaf\x36\x84\x77\x13\xdf\x41\x9b\xec\xc7\xae\x10\x34\xd9\x03\x06\xb1\x2f\x37\xe8\xd8\xd9\x31\x2b\x9b\xb8\x97\xf8\x78\xfa\x78\x73\xf7\xf5\x79\x65\x83\xb3\xb2\x53\x45\xd7\x01\x33\xfa\x3d\x90\xf0\x56\xf2\x99\xa9\x7d\xb7\x39\x53\xb4\x63\x33\x4b\xfc\x61\x0c\x13\x0c\xd4\xb5\x64\x5a\xc3\x44\xa5\x8e\x6c\x72\x4b\x10\x40\x75\x48\xde\xdb\x08\x83\x4a\x4c\x2b\xb0\x26\xed\xa2\x19\x33\xed\x00\xe0\x45\x41\x4b\x64\x9e\xa2\x3a\xba\x88\xd4\xf3\x80\x17\x89\x8e\x71\x48\x58\xcf\x8b\x91\xb7\x66\x05\x18\xea\xf5\xea\x2d\xb4\x4f\x0c\x61\xfe\xfa\xaa\x66\xa2\x9a\x14\x69\x74\x39\x4c\x60\xc8\xfa\x77\x33\x69\xfb\xa8\xe0\xd2\x5d\xfd\x22\x3a\x5f\xf5\x68\xec\xb4\xb6\xdd\x3a\xa5\x56\x32\x1b\xa3\x49\x21\xa4\xf2\x88\x33\x29\x86\x49\x85\x39\xa2\x01\xa6\xb4\x7d\xcf\xeb\x1e\xb8\xe1\x5c\xd9\xd2\xfe\x5b\x99\x6b\x39\x5f\x45\x4f\xee\xff\x79\x70\xba\x38\x5e\xf1\x84\xda\xd1\xde\x41\xb9\xde\x81\xa9\xab\xcf\x54\xe3\x02\xb6\xb4\xca\xa7\x8e\x21\xe1\xf5\xc4\xf9\xa8\x4c\x99\x71\x36\x45\x4a\x48\x0e\x7e\x12\x3f\x0f\x1b\x95\x4e\x72\x05\xc5\xae\xf2\xd7\xa2\x26\x6a\x11\xf8\x75\x69\xdf\xf8\x11\x69\x3e\x35\x53\x7e\xbc\xc6\x0f\x9b\xbf\xef\x9a\x6f\x9e\xbd\x94\xbf\x01\x00\x00\xff\xff\x49\x07\x95\x5d\xc2\x08\x00\x00")

func configsTopYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsTopYaml,
		"configs/top.yaml",
	)
}

func configsTopYaml() (*asset, error) {
	bytes, err := configsTopYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/top.yaml", size: 2242, mode: os.FileMode(420), modTime: time.Unix(1441401219, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"configs/csv-example.yaml": configsCsvExampleYaml,
	"configs/rule-example.yaml": configsRuleExampleYaml,
	"configs/top.yaml": configsTopYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"configs": &bintree{nil, map[string]*bintree{
		"csv-example.yaml": &bintree{configsCsvExampleYaml, map[string]*bintree{
		}},
		"rule-example.yaml": &bintree{configsRuleExampleYaml, map[string]*bintree{
		}},
		"top.yaml": &bintree{configsTopYaml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

